----- Setup -----
* X by Y grid
* Contains "Vertices" assigned a number from 1 to 8
* No directly adjacent vertices (not really required, but the official game does it this way)

----- Rules -----
* Vertex Number indicates # of edges that should be adjacent to that vertex.
	* May have 0-2 edges per side
* Edges cannot overlap
* Edges cannot pass through other vertices
* Edges are directly horizontal or vertical. (No diagonals or curves)
* Must be a connected graph (no disconnected components)

----- General Algorithm Idea -----
Most obvious way to store the grid data is as a 2d-array.
	Use numbers 1-8 to indicate a vertex of that desired degree
	Use other numbers to indicate:
		A filled vertex (0)
		An empty region (-1)
		A horizontal edge (10)
		A double horizontal edge (11)
		A vertical edge (20)
		A double vertical edge (21)
		When displaying output translate these into more sensible characters
			(Empty space, ascii characters ─═│║<-- may not be very portable)

Create a seperate graph where each vertex has neighbours equal to the ones it can see in the cardinal directions.
These vertices should label themselves by their XY coordinate. This will make it much easier to add neighbours.
--> Might be faster to have another 2d array that references the vertex objects

Search this graph for vertices that meet established triviality rules for the game (eg a "1" with only 1 neighbour should connect to it) and then update the main grid by adding the edge(s) and updating the numbers
Will need to re-generate this graph every time a new edge is added to correctly remove neighbours that no longer exist because edges
are blocking them.
--> Might just be able to scan the columns/rows the edge is in.
--> Add up all the numbers and divide by 2 = number of edges our solution should have (so we know when we've recursed enough)

We're done when all numbers are 0.
It may not be possible to achieve this through only the triviality rules, so we'd have to use a recursive search tree to check the remaining possibilities (like our independent set assignment)
We'll probably need a way to verify our solution is correct once we've 0'd out every vertex. (And then backtrack when it isn't)
--> Considering the fixed parameter nature of the problem, we may not need to resort to this method once we know enough rules.

----- Test Input Format -----
First line: # indicating columns, # indicating rows
Remaining lines: Numbers 1-8 indicate vertices, -1 indicate empty spaces

Example:

5 5
3 -1 -1 1 -1
-1 -1 2 -1 -1 
3 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
2 -1 3 -1 -1 

Expected Solution:
3──1
║ 2
3 ║
│ ║
2─3